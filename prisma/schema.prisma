generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model User {
  id        String     @id @unique @default(uuid())
  name      String?
  email     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  isDeleted Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  admin     Admin?
  vendor    Vendor?
  customer  Customer?

  @@map("users")
}

model Customer {
  id           String   @id @unique @default(uuid())
  name         String
  userId       String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  Order        Order[]
  Cart         Cart?

  @@map("customers")
}

model Admin {
  id           String   @id @unique @default(uuid())
  name         String
  userId       String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Vendor {
  id            String   @id @unique @default(uuid())
  name          String
  isBlacklisted Boolean  @default(false)
  userId        String   @unique
  profilePhoto  String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orders        Order[]
  user          User     @relation(fields: [userId], references: [id])
  Shop          Shop[]

  @@map("vendors")
}

model Shop {
  id          String    @id @unique @default(uuid())
  name        String
  logo        String
  description String
  vendorId    String
  isDeleted   Boolean   @default(false)
  vendor      Vendor    @relation(fields: [vendorId], references: [userId])
  Product     Product[]
}

model Product {
  id          String      @id @unique @default(uuid())
  name        String
  price       Decimal
  categoryId  String
  inventory   Int
  description String?
  image       String
  discount    Decimal?
  shopId      String
  vendorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  shop        Shop        @relation(fields: [shopId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  CartItem    CartItem[]
  isDeleted   Boolean     @default(false)

  @@map("products")
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Cart {
  id         String     @id @default(uuid())
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cartItems  CartItem[]
  customer   Customer   @relation(fields: [customerId], references: [userId])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id              String           @id @default(uuid())
  customerId      String
  vendorId        String
  couponId        String?
  status          OrderStatus      @default(PENDING)
  totalAmount     Decimal?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  vendor          Vendor           @relation(fields: [vendorId], references: [userId])
  customer        Customer         @relation(fields: [customerId], references: [userId])
  coupon          Coupon?          @relation(fields: [couponId], references: [id])
  orderItems      OrderItem[]
  Payment         Payment?
  ShippingDetails ShippingDetails?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ShippingDetails {
  id      String @id @default(uuid())
  address String
  phone   String
  email   String
  cityId  String
  orderId String @unique
  city    City   @relation(fields: [cityId], references: [id])
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("shipping_details")
}

model Region {
  id        String     @id @default(uuid())
  name      String     @unique
  districts District[]

  @@map("regions")
}

model District {
  id       String @id @default(uuid())
  name     String @unique
  regionId String
  region   Region @relation(fields: [regionId], references: [id])
  cities   City[]

  @@map("districts")
}

model City {
  id              String            @id @default(uuid())
  name            String            @unique
  districtId      String
  district        District          @relation(fields: [districtId], references: [id])
  ShippingDetails ShippingDetails[]

  @@map("cities")
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  discount    Decimal
  isActive    Boolean   @default(true)
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]

  @@map("coupons")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Payment {
  id          String   @id @default(uuid())
  orderId     String   @unique
  amount      Decimal
  paymentDate DateTime @default(now())
  status      String
  method      String
  order       Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}
