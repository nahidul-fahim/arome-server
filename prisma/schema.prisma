generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELLED
}

model User {
  id        String     @id @unique @default(uuid())
  email     String     @unique
  password  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Admin     Admin?
  Vendor    Vendor?
  Customer  Customer?

  @@map("users")
}

model Customer {
  id           String   @id @unique @default(uuid())
  name         String
  email        String   @unique
  userId       String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  Order        Order[]
  Cart         Cart[]

  @@map("customers")
}

model Admin {
  id           String   @id @unique @default(uuid())
  name         String
  email        String   @unique
  userId       String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("admins")
}

model Vendor {
  id            String    @id @unique @default(uuid())
  shopName      String
  isBlacklisted Boolean   @default(false)
  email         String    @unique
  userId        String    @unique
  logo          String?
  description   String?
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
  orders        Order[]
  user          User      @relation(fields: [userId], references: [id])

  @@map("vendors")
}

model Product {
  id          String      @id @unique @default(uuid())
  name        String
  price       Float
  categoryId  String
  inventory   Int
  description String?
  image       String
  discount    Float?
  vendorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  vendor      Vendor      @relation(fields: [vendorId], references: [userId])
  category    Category    @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  CartItem    CartItem[]

  @@map("products")
}

model Category {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Cart {
  id         String     @id @default(uuid())
  customerId String     @unique
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  customer   Customer   @relation(fields: [customerId], references: [userId])
  cartItems  CartItem[]

  @@map("carts")
}

model CartItem {
  id           String   @id @default(uuid())
  cartId       String
  productId    String
  productName  String
  productImage String
  quantity     Int      @default(1)
  price        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cart         Cart     @relation(fields: [cartId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  vendorId    String
  couponId    String?
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  vendor      Vendor      @relation(fields: [vendorId], references: [userId])
  customer    Customer    @relation(fields: [customerId], references: [userId])
  coupon      Coupon?     @relation(fields: [couponId], references: [id])
  orderItems  OrderItem[]
  Payment     Payment?

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(uuid())
  orderId      String
  productId    String
  productName  String
  productImage String
  quantity     Int
  price        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Coupon {
  id          String    @id @default(uuid())
  code        String    @unique
  description String?
  discount    Float
  isActive    Boolean   @default(true)
  expiryDate  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]

  @@map("coupons")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Payment {
  id          String   @id @default(uuid())
  orderId     String   @unique
  amount      Float
  paymentDate DateTime @default(now())
  status      String
  method      String
  order       Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}
